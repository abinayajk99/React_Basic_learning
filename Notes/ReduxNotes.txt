REDUX:
Summary
1. React is a library used to build user interfaces
2. Redux is a library for managing state in a predictable way in JavaScript
applications
3.React-redux is a library that provides bindings to use React and Redux together
in an application




Cake Shop Scenario          Redux                           Purpose
Shop                        Store                           Holds the state of your application                 
Intention to BUY_CAKE       Action                          Describes what happened
Shopkeeper                  Reducer                         Ties the store and actions together





A store that holds the state of your application.
An action that describes the changes in the state of the application.
A reducer which actually carries out the state transition depending on the action.



Three principles

First Principle:  "The state of your whole application is stored in an object tree within a single store“

                Maintain our application state in a single object which would be managed by the Redux store


                Cake Shop - Let's assume we are tracking the number of cakes on the shelf
                {
                numberOfCakes: 10
                }


Second Principle:  "The only way to change the state is to emit an action, an object describing what happened“
                    To update the state of your app, you need to let Redux know about that with an action  Not allowed to directly update the state object


                    Cake Shop  Let the shopkeeper know about our action –
                    - BUY_CAKE
                    {
                    type: BUY_CAKE
                    }


Third Principles :  "To specify how the state tree is transformed by actions, you write pure reducers“
                        Reducer - (previousState, action) => newState
                        Cake Shop:  Reducer is the shopkeeper


                        const reducer = (state, action) = {
                        switch (action.type) {
                            case BUY_CAKE: return {
                            numofCakes: state.numOfCakes - 1
                        }
                        }
                        }





                        (subscribed)    Javascript App

                                                                    (dispatch)
            Redux Store                                                Action
               (State)

                                            Reducer





Actions
The only way your application can interact with the store
Carry some information from your app to the redux store
Plain JavaScript objects
Have a 'type' property that indicates the type of action being performed
The 'type' property is typically defined as string constants


                const BUY_CAKE = 'BUY_CAKE'
                function buyCake() {
                return {
                type: BUY_CAKE,
                info: 'First redux action'
                }
                }


Reducers
Specify how the app's state changes in response to actions sent to the store
Function that accepts state and action as arguements, and returns the next state
of the application
(previousState, action) => newState


                const initialState = {
                numofCakes: 10}
                const reducer = (state = initialState, action) =
                switch(action.type) {
                    case BUY_CAKE: return {
                    ... state,
                    numofCakes: state.numofCakes - 1
                }
                default: return state
                }}


Redux Store:


One store for the entire application
Responsibilities -
>Holds application state
>Allows access to state via getState()
>Allows state to be updated via dispatch(action)
> Registers listeners via subscribe(listener)
>Handles unregistering of listeners via the function returned by subscribe(listener)



            const redux = require('redux')
            const createStore = redux.createStore

            const store = createStore(reducer)
            console.log('Initial state', store.getState())
            const unsubscribe = store.subscribe(() → console.log('Updated state', store.getState())
            store.dispatch(buyCake())
            store.dispatch(buyCake())
            store.dispatch(buyCake())
            unsubscribe()


